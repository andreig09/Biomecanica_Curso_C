%%PARAMETROS DE CAMARAS BLENDER

n_cams = 5; %Numero de camaras

%Parametros Extrinsecos
%Matriz con los centros de las camaras. T(:,i) indica las coordenadas correspondientes a camara i
T =[...
	[0.23530006408691406, -2.5, 8.0]'...
	[7.5, 2.5, 1.2000000476837158]'...
	[7.5, -7.5, 1.2000000476837158]'...
	[-7.5, -7.5, 1.2000000476837158]'...
	[-7.5, 2.5, 1.2000000476837158]'...
];

%Matriz con los angulos de las camaras. angles(:,i) indica los angulos correspondientes a camara i en el orden XYZ
angles =[...
	[3.141594171524048, 3.141594171524048, -1.5707975625991821]'...
	[4.6612067222595215, 3.1492605209350586, -0.9982879757881165]'...
	[4.6612067222595215, 3.1492602825164795, -2.115298271179199]'...
	[4.6612067222595215, 3.1492607593536377, -4.139880657196045]'...
	[ 4.6612067222595215, 3.1492605209350586, -5.256891250610352]'...
];

%Matrices de rotación 
R=zeros(3, 3, n_cams);% Array de matrices para guardar en tercera dimension las rotaciones de cada camara

%matriz de rotacion y cuaternion asociado a la camara 1
R(:,:,1)= [...
	1.235804234056559e-06, -1.0, 1.5179323327174643e-06;...
	1.0, 1.2358019603198045e-06, -1.5179360843831091e-06;...
	1.5179342653937056e-06, 1.5179342653937056e-06, 1.0...
];
q1 = [-0.7071072459220886, -1.0733416502262116e-06, 6.632200756466478e-13, -0.707106351852417];

%matriz de rotacion y cuaternion asociado a la camara 2
R(:,:,2)= [...
	-0.5417262315750122, -0.03885367140173912, 0.8396565318107605;...
	0.8405200242996216, -0.03415216505527496, 0.5407029986381531;...
	0.0076677920296788216, 0.9986611008644104, 0.05115840956568718...
];
q2 = [-0.3447027802467346, -0.33213984966278076, -0.6034102439880371, -0.6377767324447632];

%matriz de rotacion y cuaternion asociado a la camara 3
R(:,:,3)= [...
	0.5179768800735474, -0.047727975994348526, 0.854062020778656;...
	0.8553602695465088, 0.01995030790567398, -0.5176493525505066;...
	0.00766755361109972, 0.9986611008644104, 0.05115840956568718...
];
q3 = [-0.630294680595398, -0.6014291644096375, -0.33571380376815796, -0.3582007884979248];

%matriz de rotacion y cuaternion asociado a la camara 4
R(:,:,4)= [...
	0.5417261719703674, 0.038853541016578674, -0.8396565914154053;...
	-0.8405200242996216, 0.03415236249566078, -0.5407029390335083;...
	0.007668030448257923, 0.9986611008644104, 0.05115840956568718...
];
q4 = [-0.637776792049408, -0.6034101843833923, 0.3321399390697479, 0.34470272064208984];

%matriz de rotacion y cuaternion asociado a la camara 5
R(:,:,5)= [...
	-0.5179771780967712, 0.04772809147834778, -0.8540618419647217;...
	-0.8553600907325745, -0.01995011977851391, 0.5176496505737305;...
	0.0076677920296788216, 0.9986611008644104, 0.05115840956568718...
];
q5 = [-0.3582007586956024, -0.33571362495422363, 0.601429283618927, 0.6302947402000427];



%Parametros Intrinsecos
t_vista ={'PERSP'  'PERSP'  'PERSP'  'PERSP'  'PERSP'  };% tipo de vista utilizado en cada camara
f=[40.0, 50.0, 50.0, 50.0, 50.0];% Vector con las distancias focales unidades en (MILLIMETERS)
shift_x = [0.0, 0.0, 0.0, 0.0, 0.0];
shift_y = [0.0, 0.0, 0.0, 0.0, 0.0];% Corrimientos horizontales y verticales del centro de la camara 
sensor_height = [18.0, 10.0, 10.0, 10.0, 10.0];%Largo, ancho y tipo de ajuste utilizado para el sensor
sensor_width = [32.0, 32.0, 32.0, 32.0, 32.0];
sensor_fit = {'AUTO'  'AUTO'  'AUTO'  'AUTO'  'AUTO'  };% En modo Auto ajusta la anchura o largura del sensor en función de la resolución 
%Este parametro nos dice que dimension del sensor se va a usar por completo dada la resolucion del renderizado

%Datos del renderizado Blender
resolution_x = 800*ones(1, length(f));
resolution_y = 300*ones(1, length(f));
pixel_aspect_x = 1.0;%si estos dos valores son iguales el pixel es cuadrado
pixel_aspect_y = 1.0;
frame_start = 1;
frame_end = 30;

%Ajustes finales
sensor = [sensor_width; sensor_height]; %Agrupo el ancho y largo del sensor en un solo vector
resolution = [resolution_x; resolution_y]; %agrupo resoluciones en un solo vector
q=[q1;q2;q3;q4;q5]; %agrupo todos los cuaterniones
q=quaternion(q); %transformo en tipo de dato cuaternion
Rq=RotationMatrix(q);%Obtengo las matrices de rotación a partir de los cuaterniones. R(:,:,i) es la matriz de rotación de la camara i